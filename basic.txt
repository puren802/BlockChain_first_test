탈중앙화 애플리케이션이란 단일 중앙 서버에 존재하지 않는 애플리케이션으로, 인터넷 상의 수백 대의 컴퓨터가 자료의 사본을 함께 보관하게 됩니다. 따라서 애플리케이션을 강제 종료시키는 것이 거의 불가능합니다. 
 결과는 블록체인에 저장됩니다.


블록체인의 핵심 개념은, 지속적으로 증가하는 자료의 목록을 유지하고 관리하는 분산 데이터베이스입니다. 관계형 데이터베이스를 안다면, 하나의 테이블 내에 여러 데이터 행이 있다는 사실을 알 겁니다. 이러한 데이터 행을, 이를테면 100개의 행을 배포하고, 이를 다음 배치로 연결한다면? 블록체인은 기본적으로 이러한 구조와 동일합니다! 각각의 배치를 일컫는 용어가 바로 '블록'이며, 블록 내부의 각 행을 '트랜잭션'이라고 합니다.



블록체인의 두드러진 특징 중 하나는 조작 및 수정이 불가능하다는 점입니다. 웹 애플리케이션의 관계형 데이터베이스에서는 행의 정보를 쉽게 업데이트할 수 있습니다. 그러나 블록체인에서는, 한 번 레코드를 생성하고 나면 레코드를 업데이트할 수 없습니다. 블록체인의 각 블록은 이전 블록의 해시, 그리고 이전 블록에 대한 링크를 저장합니다. 어떤 블록이 변경되면 해당 블록의 해시가 변경되어 쉽게 검색할 수 있습니다. 해시 함수에 대한 자세한 내용은 여기에서 확인할 수 있습니다hash functions



완전히 탈중앙화된 블록체인은 상당한 복잡성을 지니게 됩니다. 블록체인의 정의 상, 인터넷 곳곳에 블록체인의 동일한 사본이 여러 개 존재해야 하기 때문입니다. 그런데 모든 사본이 동기화되어 있는지 어떻게 확인할 수 있을까요? 블록체인의 사본을 유지하고 관리하는 모든 컴퓨터에 모든 트랜잭션이 전파되는지 어떻게 확인할 수 있을까요? 누군가가 나쁜 의도를 가지고 블록체인을 조작하는 것을 어떻게 방지할까요?


이더리움을 이해하는 가장 좋은 방법 중 하나는 이것을 기존의 클라이언트/서버 아키텍처와 비교하는 방법입니다. 웹 개발자라면 오른쪽 다이어그램을 쉽게 이해할 수 있을 것입니다(물론 웹 아키텍처를 전혀 모른다 해도 이 강좌를 따라오는 데에는 무리가 없습니다). 이것은 간단한 웹 애플리케이션의 클라이언트/서버 아키텍처입니다.



일반적인 웹 애플리케이션을 이루는 백엔드(서버 측) 코드는 보통 자바, 루비, 파이썬 등과 같은 프로그래밍 언어로 작성됩니다. 프론트엔드 코드는 보통 HTML/CSS/자바스크립트로 구현됩니다. 이러한 전체 애플리케이션을 호스팅하는 업체로는 AWS, 구글 클라우드 플랫폼, Heroku 또는 VPS 등이 있습니다.



사용자는 웹 브라우저, curl/wget(커맨드 라인) 또는 API를 통해 클라이언트로부터 웹 애플리케이션과 상호작용할 수 있습니다. 모든 클라이언트 애플리케이션은 중앙화된 하나의 웹 애플리케이션과 상호작용합니다. 클라이언트가 서버에 요청하면 서버는 요청을 처리하고, 데이터베이스 또는 캐시와 통신하며 데이터베이스를 읽고, 쓰고, 업데이트하고 클라이언트에 응답을 반환합니다.

오른쪽 그림에서 알 수 있듯이, 모든 클라이언트(브라우저)는 애플리케이션의 자체 인스턴스와 통신합니다. 클라이언트의 통신을 한 곳으로 모아 연결하는 중앙 서버가 없습니다. 즉, 이러한 탈중앙화된 이상적인 세계에서는 누구든 dapp(분산형 애플리케이션)과 상호작용하기 위해서는 컴퓨터나 스마트폰 내에 블록 체인의 전체 복사본을 구비해야 합니다. 즉, 애플리케이션을 사용하려면 먼저 전체 블록체인을 다운로드한 다음 애플리케이션 사용을 시작해야 하는 것입니다.

그러나 우리가 사는 세계는 이상적인 세계가 아니고, 모든 사람들이 이러한 앱을 사용하기 위해 블록체인 서버를 운영할 것으로 기대하는 것은 무리입니다. 사실 탈중앙화의 핵심은 단 하나의 중앙화 된 서버에 의존하지 않는 것입니다. 그래서 등장한 것이 하드디스크와 RAM을 많이 사용하지 않고도 블록체인의 전체 복사본을 다운로드하고 실행하면서도, 탈중앙화 자체를 타협하지 않아도되는 솔루션(블록체인 서버 호스팅, 메타마스크 등)입니다. 앞으로의 강좌에서 이러한 솔루션에 대해서도 알아볼 것입니다.



자, 그럼 이더리움 블록체인에는 실제로 무엇이 들어있는 걸까요? 크게 2가지 주요 구성 요소가 있습니다:

데이터베이스: 네트워크의 모든 트랜잭션은 블록체인에 저장됩니다. 스마트 계약의 배포 역시 트랜잭션으로 간주되며, 투표 역시 트랜잭션이 됩니다. 이러한 모든 트랜잭션은 공개되며, 누구나 이를 조회하고 확인할 수 있습니다. 이러한 데이터는 절대로 조작할 수 없습니다. 네트워크의 모든 노드에 동일한 데이터 복사본이 있는지 확인하고, 유효하지 않은 데이터가 이 데이터베이스에 기록되지 않도록 하기 위해 이더리움은 작업증명(Proof of Work)이라는 알고리즘을 사용하여 네트워크를 보호합니다. (http://ethereum.stackexchange.com/questions/14/what-proof-of-work-function-does-ethereum-use)
코드: 블록체인의 데이터베이스는 트랜잭션을 저장합니다. 그런데 투표에 대한 모든 논리는 어디에 담길까요? 이더리움의 세계에서는 솔리디티(Solidity)라는 언어로 논리가 담긴 애플리케이션 코드(계약서)를 작성합니다. 그런 다음 솔리디티 컴파일러를 사용하여 코드를 이더리움 바이트코드(Byte Code)로 컴파일한 다음, 해당 바이트 코드를 블록체인에 배포합니다(이더리움 계약 작성에 다른 언어를 사용할 수도 있지만, 가장 인기 있고 상대적으로 쉬운 언어가 솔리디티입니다). 따라서, 이더리움 블록체인은 트랜잭션을 저장할 뿐만 아니라 계약 코드를 저장하고 실행합니다.
기본적으로 블록체인은 데이터를 데이터 및 코드를 저장하며, 코드를 EVM(Ethereum Virtual Machine; 이더리움 가상 머신)에서 실행합니다.

웹 기반 Dapps를 만들기 위해, 이더리움에는 web3.js라는 편리한 자바스크립트 라이브러리가 있습니다. 이 라이브러리는 블록체인 노드에 연결하기 위한 것으로, 이를 응용하면 react.js, angular.js 등의 유명한 자바스크립트 프레임워크에 web3.js 라이브러리를 포함시킬 수도 있습니다.

이제 이더리움이 무엇인지에 대한 기본적인 개념을 익혔으므로, 투표 Dapp을 만들 차례입니다. 이 실습을 통해 이더리움에 대한 이해를 확고히 하고 이더리움 블록체인의 기능을 엿볼 수 있을 것입니다.



오른쪽 그림은 애플리케이션의 모양을 나타내는 일반적인 개념입니다.

개발 환경에서 우리 앱을 작동시킬 수 있도록 ganache라는 가짜 블록체인을 먼저 설치합니다.
스마트 계약을 작성하여 ganache에 배포합니다.
그런 다음 명령 줄을 통해 ganache와 상호 작용 한 다음 웹 페이지를 통해 상호 작용합니다.


다이어그램에서 볼 수 있듯이 블록체인과의 통신은 RPC(Remote Procedure Call)를 통해 이루어집니다. web3.js는 모든 RPC 호출을 추상화하는 자바스크립트 라이브러리로, 이 라이브러리가 있으면 자바스크립트를 통해 블록체인과 상호작용할 수 있습니다. web.js 사용의 또 다른 이점은, 개발자가 선호하는 자바스크립트 프레임워크를 사용하여 놀라운 웹 애플리케이션을 구축할 수 있다는 점입니다.

